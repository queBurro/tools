http://www.youtube.com/watch?v=-Ya1dQ1Igkc

 get-help Get-HotFix -Examples

$psversiontable
version3 likes .net4
ps built on framework, so later the fw the better the ps
$host.PrivateData.ErrorForegroundColor = 'green'
dir -recurse 
help *service*
@18 "discoverability features"
Update-Help
verb-singularNoun
help Get-Service -full
examples at the bottom
help Get-Service -online
[]in help means optional (in shell something different)
 
cls
@30 ps3 trick show-
@31:30 show-command get-process 
Get-EventLog -list
get-command *service* @40
"access control list" acl
dir | more    <- pipes look they pipe text but they don't!
get-service   <- auto, manual etc. not shown
help == "get-help zzz | more"  <-aliased
help get-command get-member < 3 most important commands
@48:23  row==object columns==property
TypeName: its namespace!! no it's not, it tells you the type of object produced (the object in the pipeline)

@49:53 get-process | stop-process -whatif     -confirm
<- this is NOT text output! it's objects (data structures)
@51:29 ps is patented 
@1:04 import-csv command
import-csv notes.csv | new-aduser < 
@1:09 stop-computer
@1:12 comes back from break
@1:20
get-process | Sort-Object -Property pm -Descending | Select-Object -First 10 name,id,pm,vm
Get-Process | Export-Clixml baseline.xml
compare-object < diffing
convertTo-html -fragment < check this out
-eq   == 
 'hello' -ceq 'HELLO'   false    >Casesensitive
@1:27 'hello' -like '*ll*'   true     > like from SQL
technet.com powershell column don
Get-Service | Where-Object -FilterScript { $_.Status -eq 'Running' }
gsv | Where { $_.Status -eq 'Running' }
gsv | ? { $_.Status -eq 'Running' }
help gsv
gal gal

@1:33 registry
cd hklm:
cd c:
Get-PSDrive  powershell drives
gal cat    
gal type
Get-Content Env:\COMPUTERNAME

Env is *just* a (powershell) drive, the same as C: etc.

@1:37:40 blank tool , snap ins

Get-PSSnapin   -hwta snapins do I have?
add-pssnapin    "modules" are ps2 snapins
@1:40
get-module -ListAvailable
import-module zzzz          loads into memory
get-command -module zzzz    lists commands
in ps3, there's module auto discovery
@1:43 "remoting" from Win8, everything uses this one protocol!! "WSMan" web services for management (RFC's not a windows protocol inc unix) one port! 5985 5986 is sll version (https)
no more psexec!  powershell's version of ssh
@1:49
enter-pssession -computername XXXX     credentials can't hop twice
 get-module -ListAvailable   <- read this
@1:52 can remote into 20 servers at same time and do this
-ThrottleLimit (each remote connection has one powershell)

@1:53 help about_remote_troubleshooting

@2:00 giving HR limited commands on an endpoint
endpoint - different configuarionName of powershell of endpoint of powershell

endpoint - different configuarionName of powershell of endpoint of powershell

@205 get-module | remove-module     unloads everything     no AD modules
get-PsSNapin | remove-PSSNapin     remove all snapins that it’ll let you  “naked powershell”
206 created persistant connection to other coomputer

get-aduser
looks like it ran locally (implicit remoting) so let them live on server, doesn’t have to be installed on clients
@210 profiles
help about_profiles

@2:13 no more GUIs on windows server

@2:17 trouble shooting
Enter-PSSession -ComputerName sss  etc. then run same wizard from the command line
can only remote in via AD’s hostname, if you want to use dns/IP have to add to trusted hosts

@2:25 enable tracing - diagnostics    SHOW DEBUG LOGS
disable tracing

@2:26 - save a trace from good computer, then diff that against the bad one
@2:27 lunch break

@233 Root\Common Information

@237 Get-WmiObject -class win32_bios | get-member
Get-WmiObject -class win32_operatingsystem | select -Property *

SELECT - picks columns
WHERE - filters  ...like SQL

@246 formatting shell output
@250 custom columns   FormatString=’F2’  float point , 2dp
Out-File zzz.txt -append     same as >>
@2:53     out-gridview!!
@2:55 don’t use format, use select-object,

filter left,    format right 

@259 credential object (password)

-asjob runs job in background (like shell&) - obviously only shows in that shell

@305 get-job gets you the list of jobs back

receive-job -id 3 -keep         gets you the results, only    keep doesn’t throw away results
remove-job -id 2              gets rid of the kept jobs
stop-job -id 8
in v3 you can schedule jobs with this (results is then cached to disc)

@312 i/o     read-host “add something”
write-host <- don’t use this, can’t convert it to html, or csv, just drawings on screen
write-output … can redirect, export etc.

get-command -verb write

@320 - execution policy   
get-executionPolicy
.ps1 opens up with notepad  - by design

@323 “principle of least privilege” 
powershell needs a path, e.g.    ./test   current directory works 
scripts have paths
commands don’t 

@328 another break!

$x = 5               variables,   “x” is the variable name
${this is also, a variable}    curly brackets let you name whatever you want <- don’t do this

$s = get-service
$s[3] = one of the services

@332 PS C:\Users\tb> $a = "World"
PS C:\Users\tb> $b = "hello $a"
PS C:\Users\tb> $b
hello World



PS C:\Users\tb> $x = 5
PS C:\Users\tb> $y = '5'
PS C:\Users\tb> $x + $y     casting occurs
10
PS C:\Users\tb> $y + $x
55                              
thus:
[int]$age = read-host “enter your age”

@336 writing your own cmdlet

@346 mandatory parmeters      
write-verbose    messages show up when run with -verbose

@350 -debug 

common-parameters 
-debug verbose full detailed?
@353 one shell

@358 powershell tool making

help about*
help about_scripts

http://bit.ly/AskDon
powershell.com
connect.microsoft.com
@4:05:16 
make it part of your job
get automating in to my job dscription
automating - “part of my job this year will be to automate a task a that takes us 5 hours to do...” a metric on me, this will save us 5 hours in the course of a year
if I’ve not done it... “you didn’t give me the time I needed”


Get-Process | where                   name -Match wininit   <- posh3
Get-Process | Where-Object       name -Match wininit   <- posh3
Get-Process | Where-Object {$_.Name -match wininit}  <- FAILS
Get-Process | Where-Object {$_.Name -match "wininit"}


---

powershell notes..

Enter-PSSession -computerName tfsbuildwsper

---
from google drive...
  PS C:\_ws\tfs\collnView\fb\fb01> ls -r *.sln -File -Filter "*.sln" | Select-Object Name | Sort-Object Name
  get-adgroupmember tfs_testers | select name   <- ran this on tfsbuildwsper1, as it's an installed feature
  get-adgroupmember tfs_member | select name

  ^ run command on different box...
  enter-pssession tfsbuildwsper1
  invoke-command -computername tfsbuildwsper1 {get-adgroupmember tfs_member | select name}
http://stackoverflow.com/questions/25856517/get-list-of-checked-out-files-in-tfs-error 
